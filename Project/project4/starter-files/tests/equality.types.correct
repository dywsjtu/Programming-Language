ProgramNode {
  FunctionDeclNode {
    TypeNameNode: void {
      NameNode {
        void
      }
    }
    NameNode {
      main
    }
    ParameterNode {
      ArrayTypeNameNode: string[] {
        TypeNameNode: string {
          NameNode {
            string
          }
        }
      }
      NameNode {
        args
      }
    }
    VarDeclNode {
      TypeNameNode: int {
        NameNode {
          int
        }
      }
      NameNode {
        i
      }
    }
    VarDeclNode {
      TypeNameNode: float {
        NameNode {
          float
        }
      }
      NameNode {
        f
      }
    }
    BlockNode {
      ExpressionStatementNode {
        AssignNode: int {
          NameExpressionNode: int {
            NameNode {
              i
            }
          }
          IntegerNode: int {
            3
          }
        }
      }
      ExpressionStatementNode {
        AssignNode: float {
          NameExpressionNode: float {
            NameNode {
              f
            }
          }
          FloatNode: float {
            4.0
          }
        }
      }
      ExpressionStatementNode {
        CallNode: void {
          NameNode {
            println
          }
          PlusNode: string {
            StringNode: string {
              ""
            }
            EqualNode: boolean {
              NameExpressionNode: int {
                NameNode {
                  i
                }
              }
              NameExpressionNode: int {
                NameNode {
                  i
                }
              }
            }
          }
        }
      }
      ExpressionStatementNode {
        CallNode: void {
          NameNode {
            println
          }
          PlusNode: string {
            StringNode: string {
              ""
            }
            NotEqualNode: boolean {
              NameExpressionNode: float {
                NameNode {
                  f
                }
              }
              NameExpressionNode: float {
                NameNode {
                  f
                }
              }
            }
          }
        }
      }
      ExpressionStatementNode {
        CallNode: void {
          NameNode {
            println
          }
          PlusNode: string {
            StringNode: string {
              ""
            }
            EqualNode: boolean {
              NameExpressionNode: int {
                NameNode {
                  i
                }
              }
              NameExpressionNode: float {
                NameNode {
                  f
                }
              }
            }
          }
        }
      }
      ExpressionStatementNode {
        CallNode: void {
          NameNode {
            println
          }
          PlusNode: string {
            StringNode: string {
              ""
            }
            NotEqualNode: boolean {
              NameExpressionNode: int {
                NameNode {
                  i
                }
              }
              NameExpressionNode: float {
                NameNode {
                  f
                }
              }
            }
          }
        }
      }
      ExpressionStatementNode {
        CallNode: void {
          NameNode {
            println
          }
          PlusNode: string {
            StringNode: string {
              ""
            }
            EqualNode: boolean {
              NewNode: foo {
                NameNode {
                  foo
                }
                IntegerNode: int {
                  3
                }
              }
              NewNode: foo {
                NameNode {
                  foo
                }
                IntegerNode: int {
                  3
                }
              }
            }
          }
        }
      }
      ExpressionStatementNode {
        CallNode: void {
          NameNode {
            println
          }
          PlusNode: string {
            StringNode: string {
              ""
            }
            NotEqualNode: boolean {
              NewNode: foo {
                NameNode {
                  foo
                }
                IntegerNode: int {
                  3
                }
              }
              NewNode: foo {
                NameNode {
                  foo
                }
                IntegerNode: int {
                  3
                }
              }
            }
          }
        }
      }
      ExpressionStatementNode {
        CallNode: void {
          NameNode {
            println
          }
          PlusNode: string {
            StringNode: string {
              ""
            }
            EqualNode: boolean {
              NewNode: foo {
                NameNode {
                  foo
                }
                IntegerNode: int {
                  3
                }
              }
              NewNode: foo {
                NameNode {
                  foo
                }
                IntegerNode: int {
                  4
                }
              }
            }
          }
        }
      }
      ExpressionStatementNode {
        CallNode: void {
          NameNode {
            println
          }
          PlusNode: string {
            StringNode: string {
              ""
            }
            NotEqualNode: boolean {
              NewNode: foo {
                NameNode {
                  foo
                }
                IntegerNode: int {
                  3
                }
              }
              NewNode: foo {
                NameNode {
                  foo
                }
                IntegerNode: int {
                  4
                }
              }
            }
          }
        }
      }
      ExpressionStatementNode {
        CallNode: void {
          NameNode {
            println
          }
          PlusNode: string {
            StringNode: string {
              ""
            }
            EqualNode: boolean {
              NewNode: foo {
                NameNode {
                  foo
                }
                IntegerNode: int {
                  3
                }
              }
              NullNode: null {
              }
            }
          }
        }
      }
      ExpressionStatementNode {
        CallNode: void {
          NameNode {
            println
          }
          PlusNode: string {
            StringNode: string {
              ""
            }
            NotEqualNode: boolean {
              NewNode: foo {
                NameNode {
                  foo
                }
                IntegerNode: int {
                  3
                }
              }
              NullNode: null {
              }
            }
          }
        }
      }
      ExpressionStatementNode {
        CallNode: void {
          NameNode {
            println
          }
          PlusNode: string {
            StringNode: string {
              ""
            }
            EqualNode: boolean {
              NewArrayNode: foo[] {
                TypeNameNode: foo {
                  NameNode {
                    foo
                  }
                }
                NewNode: foo {
                  NameNode {
                    foo
                  }
                  IntegerNode: int {
                    3
                  }
                }
              }
              NewArrayNode: foo[] {
                TypeNameNode: foo {
                  NameNode {
                    foo
                  }
                }
                NewNode: foo {
                  NameNode {
                    foo
                  }
                  IntegerNode: int {
                    3
                  }
                }
              }
            }
          }
        }
      }
      ExpressionStatementNode {
        CallNode: void {
          NameNode {
            println
          }
          PlusNode: string {
            StringNode: string {
              ""
            }
            NotEqualNode: boolean {
              NewArrayNode: foo[] {
                TypeNameNode: foo {
                  NameNode {
                    foo
                  }
                }
                NewNode: foo {
                  NameNode {
                    foo
                  }
                  IntegerNode: int {
                    3
                  }
                }
              }
              NewArrayNode: foo[] {
                TypeNameNode: foo {
                  NameNode {
                    foo
                  }
                }
                NewNode: foo {
                  NameNode {
                    foo
                  }
                  IntegerNode: int {
                    4
                  }
                }
              }
            }
          }
        }
      }
      ExpressionStatementNode {
        CallNode: void {
          NameNode {
            println
          }
          PlusNode: string {
            StringNode: string {
              ""
            }
            NotEqualNode: boolean {
              NewArrayNode: foo[] {
                TypeNameNode: foo {
                  NameNode {
                    foo
                  }
                }
                NewNode: foo {
                  NameNode {
                    foo
                  }
                  IntegerNode: int {
                    3
                  }
                }
              }
              NewArrayNode: foo[] {
                TypeNameNode: foo {
                  NameNode {
                    foo
                  }
                }
                NewNode: foo {
                  NameNode {
                    foo
                  }
                  IntegerNode: int {
                    3
                  }
                }
                NewNode: foo {
                  NameNode {
                    foo
                  }
                  IntegerNode: int {
                    4
                  }
                }
              }
            }
          }
        }
      }
      ExpressionStatementNode {
        CallNode: void {
          NameNode {
            println
          }
          PlusNode: string {
            StringNode: string {
              ""
            }
            EqualNode: boolean {
              NewArrayNode: foo[] {
                TypeNameNode: foo {
                  NameNode {
                    foo
                  }
                }
                NewNode: foo {
                  NameNode {
                    foo
                  }
                  IntegerNode: int {
                    3
                  }
                }
              }
              NullNode: null {
              }
            }
          }
        }
      }
      ExpressionStatementNode {
        CallNode: void {
          NameNode {
            println
          }
          PlusNode: string {
            StringNode: string {
              ""
            }
            NotEqualNode: boolean {
              NewArrayNode: foo[] {
                TypeNameNode: foo {
                  NameNode {
                    foo
                  }
                }
                NewNode: foo {
                  NameNode {
                    foo
                  }
                  IntegerNode: int {
                    3
                  }
                }
              }
              NullNode: null {
              }
            }
          }
        }
      }
    }
  }
  StructDeclNode: foo {
    NameNode {
      foo
    }
    VarDeclNode {
      TypeNameNode: int {
        NameNode {
          int
        }
      }
      NameNode {
        x
      }
    }
  }
}
